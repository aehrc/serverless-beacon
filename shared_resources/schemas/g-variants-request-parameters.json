{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "additionalProperties": true,
    "description": "Component definitions used",
    "properties": {
        "alternateBases": {
            "description": "Alternate bases for this variant (starting from `start`). * Accepted values: `[ACGTN]*` * N is a wildcard, that denotes the position of any base,\n  and can be used as a standalone base of any type or within a partially known\n  sequence. As example, a query of `ANNT` the Ns can take take any form of [ACGT]\n  and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth.\n* an *empty value* is used in the case of deletions with the maximally trimmed,\n  deleted sequence being indicated in `ReferenceBases`\n* Categorical variant queries, e.g. such *not* being represented through\n  sequence & position, make use of the `variantType` parameter.\n* either `alternateBases` or `variantType` is required.",
            "pattern": "^([ACGTUNRYSWKMBDHV\\-\\.]*)$",
            "type": "string"
        },
        "aminoacidChange": {
            "description": "Aminoacid alteration of interest. Format 1 letter",
            "examples": [
                "V600E",
                "M734V"
            ],
            "type": "string"
        },
        "assemblyId": {
            "description": "Genomic assembly accession and version as RefSqeq assembly accession (e.g. \"GCF_000001405.39\") or a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. \"hg38\") or Genome Reference Consortium Human (e.g. \"GRCh38.p13\") names.",
            "example": [
                "GCF_000001405.39",
                "hg38",
                "GRCh38.p13"
            ],
            "type": "string"
        },
        "end": {
            "description": "Precise or bracketing the end of the variants of interest: * (0-based, exclusive) - see `start` * for bracket queries, provide 2 values (e.g. [111,222]).\"",
            "items": {
                "format": "int64",
                "minimum": 1,
                "type": "integer"
            },
            "maxItems": 2,
            "minItems": 0,
            "type": "array"
        },
        "geneId": {
            "description": "* A gene identifier * It is strongly suggested to use a symbol following\n  the HGNC (https://www.genenames.org) nomenclature.",
            "examples": [
                "BRAF",
                "SCN5A"
            ],
            "type": "string"
        },
        "genomicAlleleShortForm": {
            "description": "HGVSId descriptor",
            "examples": [
                "NM_004006.2:c.4375C>T"
            ],
            "type": "string"
        },
        "mateName": {
            "description": "Reference sequence id for genomic reference sequence in which variant coordinates are given, e.g. \"NC_000009\" for human chromosome 9. Preferably the RefSeqId, alternatively, names, synonymous or aliases e.g. \"Chr9\" could be used.",
            "example": [
                "NC_000009",
                "Chr9",
                "NC_012920.1"
            ],
            "type": "string"
        },
        "referenceBases": {
            "description": "Reference bases for this variant (starting from `start`). * Accepted values: `[ACGTN]*` * N is a wildcard, that denotes the position of any base,\n  and can be used as a standalone base of any type or within a partially known\n  sequence. As example, a query of `ANNT` the Ns can take take any form of [ACGT]\n  and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth.\n* an *empty value* is used in the case of insertions with the maximally trimmed, inserted\n  sequence being indicated in `AlternateBases`",
            "pattern": "^([ACGTUNRYSWKMBDHV\\-\\.]*)$",
            "type": "string"
        },
        "referenceName": {
            "description": "Reference sequence id for genomic reference sequence in which variant coordinates are given, e.g. \"NC_000009\" for human chromosome 9. Preferably the RefSeqId, alternatively, names, synonymous or aliases e.g. \"Chr9\" could be used.",
            "example": [
                "NC_000009",
                "Chr9",
                "NC_012920.1"
            ],
            "type": "string"
        },
        "start": {
            "description": "Precise or fuzzy start coordinate position(s), allele locus (0-based, inclusive). * `start` only:\n  - for single positions, e.g. the start of a specified sequence\n    alteration where the size is given through the specified `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use of\n    `alternateBases`\n* `start` and `end`:\n  - for searching any variant falling fully or partially within the range\n    between `start` and `end` (a.k.a. \"range query\")\n  - additional use of `variantType` OR `alternateBases` can limit the\n    scope of the query\n  - by convention, partial overlaps of variants with the indicated genomic\n    range are accepted; for specific overlap requirements the 4-parameter\n    \"Bracket Queries\" should be employed\n* 2 values in both `start` and `end` for constructing a \"Bracket Query\":\n  - can be used to match any contiguous genomic interval, e.g. for querying\n    imprecise positions\n  - identifies all structural variants starting between `start[0]` and `start[1]`,\n    and ending between `end[0]` <-> `end[1]`\n  - single or double sided precise matches can be achieved by setting\n    `start[1]=start[0]+1` and `end[1]=end[0]+1`",
            "items": {
                "format": "int64",
                "minimum": 0,
                "type": "integer"
            },
            "maxItems": 2,
            "minItems": 1,
            "type": "array"
        },
        "variantMaxLength": {
            "description": "* Maximum length in bases of a genomic variant. * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
        },
        "variantMinLength": {
            "description": "* Minimum length in bases of a genomic variant * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
        },
        "variantType": {
            "description": "The `variantType` is used to query variants which are not defined through a sequence of one or more bases using the `alternateBases` parameter. Examples here are e.g. structural variants: * DUP\n  - increased allelic count of material from the genomic region between\n    `start` and `end` positions\n  - no assumption about the placement of the additional sequences is being\n    made (i.e. no _in situ_ requirement as tandem duplications)\n* DEL: deletion of sequence following `start` * BND: breakend, i.e. termination of the allele at position `start` or in\n  the `startMin` => `startMax` interval, or fusion of the sequence to distant\n  partner\nEither `alternateBases` or `variantType` is required, with the exception of range queries (single\\ `start` and `end` parameters).",
            "type": "string"
        }
    },
    "type": "object"
}
